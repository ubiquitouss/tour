.row {
    max-width: $grid-width;
    // the difference between width and max width is ..the 'max-width' adopts the screen size change
    // background-color: #eee;
    margin:0 auto;
     // this is used to center the block elements and also for block elements inside the block element
    &:not(:last-child) {
        margin-bottom: $gutter-vertical;
    // ? we have gutter with every row. but we don't want extra gutter space with the last one
    //! this condition applies to everyone, except the last child. for this we used theis 
    }


    @include clearfix;


    [class^="col-"]{
        // background-color: orangered;
        float: left;

        &:not(:last-child) {
            margin-right: $gutter-horizontal;
        }

    }
    // this properties will only work for the 'col-'
    // class^ = starts with 'col-'
    // class$ = endss with 'col-'
    // class* = contains 'col-'

    .col-1-of-2{
        width: calc((100% - #{$gutter-horizontal})/2);
        // ? calc is a function where we ca do simple math in css
        // ! total space on page is 100%.if we substract the gutter space and divide it with two. we will get the proper space for the first portion   
        // ? # is used to work it in a sass file
        }

    .col-1-of-3{
        width: calc((100% - 2 * #{$gutter-horizontal})/3);     
    }
    .col-2-of-3{
        width: calc( 2* ((100% - 2 * #{$gutter-horizontal})/3) + #{$gutter-horizontal});     
    }
    .col-1-of-4{
        width: calc((100% - 3 * #{$gutter-horizontal})/4);     
    }
    .col-2-of-4{
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal} );     
    }
    .col-3-of-4{
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal})/4) + 2 * #{$gutter-horizontal} ); 
        // !caution: important: you have to maintain all the spaces here you see. otherwise it won't work
    
    }
}