@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px); }
  80% {
    transform: translateX(10px); }
  /* 
    80% {
        transform: rotateX(0deg)
    } */
  /*! we also have rotation to rotate an animation  */
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px); }
  80% {
    transform: translateX(-10px); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px); }
  80% {
    transform: translateX(-10px); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(60px); }
  100% {
    opacity: 1;
    /* transform: translateX(0) */ } }

/*! * is a universal selector */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /*! normally when you add 'padding' or 'border' it takes extra space outside. but you*/
  /*! in border box it doesn't take extra space. it remains inside the space you selsected for the border  */ }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  /*! difference between two lines */
  color: #777;
  padding: 30px; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /*? animation  */
  backface-visibility: hidden;
  /*!this resolves animation shaking. no one knows why  */
  margin-bottom: 60px; }
  .heading-primary--main {
    display: block;
    /*? this line creates line break  */
    font-size: 60px;
    font-weight: 700;
    letter-spacing: 35px;
    /*! Animation part  */
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-delay: 3s; */
    /*! animation will start after 3s of loading the page  */
    /* animation-iteration-count: 3; */
    /*! animation will happen 3 times  */
    /* animation-timing-function: ease-in; */
    /*!ease-in== animation is slower and then fast  */
    /*!ease-out== animation is faster and then slow  */
    /*? we can also use animation when hover  */ }
  .heading-primary--sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    /*! animation part  */
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; }

.btn {
  /*! pseudo classes  */
  /*! link state or visited state  */
  /*! pseudo element  */
  /*! animation shaking when hover  */
  /*? the main theme is ...we have our main button and we will have a similar like button behnd that button  */
  /*? and when we hover it disappears  */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    /*! normally it's an inline element. means it doesn't have it's own space. to give it it's own space  */
    display: inline-block;
    border-radius: 100px;
    /*! to make the button from square to radius means to cut the edge */
    /*! Animation short  */
    transition: all .2s;
    /*!this part is for the animation   */
    position: relative; }
  .btn:hover {
    transform: translateY(-10px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); }
  .btn.active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
  .btn::after {
    content: "";
    /*! this line doesn't heve anything to do. but it has to be here  */
    display: inline-block;
    /*! this line takes it's own space for the button like the 1st button  */
    height: 100%;
    width: 100%;
    /*! these lines will make the 2nd button exxactly like the 1st button .  */
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--white::after {
    background-color: #fff; }
  .btn:hover::after {
    /* transform: scale(1.5); */
    /*!this makes buttons 1.5 times biggre. it has to be bigger than 1. 1 is the exact or same size. that's why it won't work  */
    /* to make it better the code will be like this */
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }
  .btn--animated {
    /* animation-name: moveInButton;
    animation-duration: .7s;
    animation-timing-function: ease-in;
    animation-delay: .75s; */
    /*! these whole thing can be written in one line  */
    animation: moveInButton .5s ease-out .75s;
    /*! normally button stays visible ...and it appears from the down   */
    /*! but what we want is to move it from the bottom but not visible before it  */
    /*! the solution is this line  */
    animation-fill-mode: backwards;
    /*! this line applies the properties of 0% before the animation starts  */ }

.header {
  height: 95vh;
  /*! it takes the 95 percent of the total box size. you will see a 5% blank area */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* rgba= red green blue and opacity: ; */
  /*! 'liniar gradient right' here mixture of two colors starting from left to right: ;  */
  /*! 'liniar gradient right bottom' here mixture of two colors starting from left to right but at the bottom cornder ;  */
  /*! 'liniar gradient right bottom ' here mixture of two colors adn the image starting from left to right but at the bottom cornder ;  */
  background-size: cover;
  /*! whatever the width of the viewport. 'cover' will try to fit in that width */
  background-position: top;
  /*! wahtever the viewport size image always stays at  the top of the container  */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  /*! this line cuts the image. you have to set the four co ordinates  */
  /*! a tool called 'clippy' can be used for this. search in google  */
  /* clip-path: polygon(0 0,100% 50% , 100% 50%, 0 100%); */
  /*!this line makes triangle  */
  position: relative;
  /*? header image is relative but other contents are absolute. means they move but header stasys fixed relative to them  */
  /*?this position is relative acording to the logo and logo-box  */ }
  .header__logo-box {
    position: absolute;
    top: 40px;
    left: 40px; }
  .header__logo {
    height: 30px; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /*! first we fixed a position  */
    transform: translate(-50%, -50%);
    /*! then we cut the position from the current position. because the whole position wasn't right  */
    text-align: center;
    /*! to keep all the texts at the center of the box  */ }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
